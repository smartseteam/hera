Authors,Author(s) ID,Title,Year,Source title,Volume,Issue,Art. No.,Page start,Page end,Page count,DOI,Link,Abstract,Author Keywords,Document Type,Publication Stage,Access Type,Source
"Sharafi Z., Soh Z., Guéhéneuc Y.-G.","25825656000;49862200700;13613429100;","A systematic literature review on the usage of eye-tracking in software engineering",2015,"Information and Software Technology","67",,,"79","107",,"10.1016/j.infsof.2015.06.008","https://www.scopus.com/inward/record.uri?eid=2-s2.0-84942013015&doi=10.1016%2fj.infsof.2015.06.008&partnerID=40&md5=7f007f2ff9a1bbdad92ebc41a76ff967","Context Eye-tracking is a mean to collect evidence regarding some participants' cognitive processes. Eye-trackers monitor participants' visual attention by collecting eye-movement data. These data are useful to get insights into participants' cognitive processes during reasoning tasks. Objective The Evidence-based Software Engineering (EBSE) paradigm has been proposed in 2004 and, since then, has been used to provide detailed insights regarding different topics in software engineering research and practice. Systematic Literature Reviews (SLR) are also useful in the context of EBSE by bringing together all existing evidence of research and results about a particular topic. This SLR evaluates the current state of the art of using eye-trackers in software engineering and provides evidence on the uses and contributions of eye-trackers to empirical studies in software engineering. Method We perform a SLR covering eye-tracking studies in software engineering published from 1990 up to the end of 2014. To search all recognised resources, instead of applying manual search, we perform an extensive automated search using Engineering Village. We identify 36 relevant publications, including nine journal papers, two workshop papers, and 25 conference papers. Results The software engineering community started using eye-trackers in the 1990s and they have become increasingly recognised as useful tools to conduct empirical studies from 2006. We observe that researchers use eye-trackers to study model comprehension, code comprehension, debugging, collaborative interaction, and traceability. Moreover, we find that studies use different metrics based on eye-movement data to obtain quantitative measures. We also report the limitations of current eye-tracking technology, which threaten the validity of previous studies, along with suggestions to mitigate these limitations. Conclusion However, not withstanding these limitations and threats, we conclude that the advent of new eye-trackers makes the use of these tools easier and less obtrusive and that the software engineering community could benefit more from this technology. © 2015 Elsevier B.V.","Experiment; Eye-tracking; Software engineering",Conference Paper,"Final",,Scopus
"Marques M.R., Quispe A., Ochoa S.F.","55438418600;37077922200;8605223400;","A systematic mapping study on practical approaches to teaching software engineering",2015,"Proceedings - Frontiers in Education Conference, FIE","2015-February","February", 7044277,"","",,"10.1109/FIE.2014.7044277","https://www.scopus.com/inward/record.uri?eid=2-s2.0-84938152419&doi=10.1109%2fFIE.2014.7044277&partnerID=40&md5=058185d1cca4acf03e5fee262e7e14b9","Background: Software engineering is a core subject in computing education. Today, there seems to be a consensus that teaching software engineering requires students to perform practical experiences that simulate the work in the software industry. This represents a challenge for universities and instructors, because these experiences are complex to setup and involve considerable time and effort. Although there are several experiences and proposals reported in the literature, there is no clear solution to address this challenge. Aim: Being knowledgeable about the several approaches reported in the literature for dealing with this challenge is the first step to proposing a new solution. Counting on this knowledge allows instructors to reuse lessons learned from other universities. In order to address this challenge, we conducted a systematic mapping study that intends to answer the following questions: What are the main approaches used to address the practical experiences in software engineering education? Is there an emerging tendency to address this challenge? Which software process models are used to support the practical experiences in software engineering courses? Have the universities changed the way of conducting these experiences over the years? What are the main forums to seek information on practical approaches for teaching software engineering? Method: We used a systematic mapping study to identify and classify available research papers that report the use of practical experiences in software engineering education. Results: There were 173 papers selected, analyzed and classified. The results indicate that universities have realized the value of including practical experiences as part of the software engineering teaching process. However, few proposals indicate how to address that challenge. The practical approaches identified in this study were game learning, case studies, simulation, inverted classrooms, maintenance projects, service learning, and open source development. Only one recent report on the use of traditional approaches (i.e., teaching using expositive lectures) was found. The use of a development process to support these practical experiences seems not to be a concern for software engineering instructors. Only 40% of these studies report the use of a development process to guide the process experience. The reported processes are mainly agile methods. Conferences are the most used forum to publish studies in this area (72%). One third of these studies have been published over the last five years. Conclusion: There is a clear concern for teaching software engineering involving practical experiences, and there are several initiatives exploring how to do it. The map gives us an overview of the different proposals to address this challenge, and also allows us to make some preliminary conclusions about the preferred approaches. © 2014 IEEE.","software engineering education; systematic mapping",Conference Paper,"Final",,Scopus
"Ardini A., Hosseini M., Alrobai A., Shahri A., Phalp K., Ali R.","57209125358;56310261400;56152957000;56441421700;6603046847;56038311800;","Social computing for software engineering: A mapping study",2014,"Computer Science Review","13-14","C",,"75","93",,"10.1016/j.cosrev.2014.08.002","https://www.scopus.com/inward/record.uri?eid=2-s2.0-84927613879&doi=10.1016%2fj.cosrev.2014.08.002&partnerID=40&md5=96152b16c01c5e7954b2c6a4538d2c00","There is a continual growth in the use of social computing within a breadth of business domains; such as marketing, public engagement and innovation management. Software engineering research, like other similar disciplines, has recently started to harness the power of social computing throughout the various development phases; from requirements elicitation to validation and maintenance and for the various methods of development and structures of development teams. However, despite this increasing effort, we still lack a clear picture of the current status of this research. To address that lack of knowledge, we conduct a systematic mapping study on the utilisation of social computing for software engineering. This will inform researchers and practitioners about the current status and progress of the field including the areas of current focus and the geographical and chronological distribution of the research. We do the mapping across a diversity of dimensions including the activities of software engineering, the types of research, the characteristics of social computing and the demographic attributes of the published work. Our study results show a growing interest in the field, mainly in academia, and a general trend towards developing designated social computing platforms and utilising them in mainly four software engineering areas: management, coding, requirements engineering, and maintenance and enhancement. © 2014 Elsevier Inc.","Social computing; Software engineering; Systematic mapping",Review,"Final",,Scopus
"Da Silva F.Q.B., Frana A.C.C.","35229324700;39461293000;","Towards understanding the underlying structure of motivational factors for software engineers to guide the definition of motivational programs",2012,"Journal of Systems and Software","85","2",,"216","226",,"10.1016/j.jss.2010.12.017","https://www.scopus.com/inward/record.uri?eid=2-s2.0-82955218872&doi=10.1016%2fj.jss.2010.12.017&partnerID=40&md5=1f8248339cb51b4235122f6ed2508897","Aim: In this article, factors influencing the motivation of software engineers is studied with the goal of guiding the definition of motivational programs. Method: Using a set of 20 motivational factors compiled in a systematic literature review and a general theory of motivation, a survey questionnaire was created to evaluate the influence of these factors on individual motivation. Then, the questionnaire was applied on a semi-random sample of 176 software engineers from 20 software companies located in Recife-PE, Brazil. Results: The survey results show the actual level of motivation for each motivator in the target population. Using principal component analysis on the values of all motivators, a five factor structure was identified and used to propose a guideline for the creation of motivational programs for software engineers. Conclusions: The five factor structure provides an intuitive categorization for the set of variables and can be used to explain other motivational models presented in the literature. This contributes to a better understanding of motivation in software engineering. © 2010 Elsevier Inc.","Empirical software engineering; Motivation; People management; Software development",Conference Paper,"Final",,Scopus
"Torkar R., Gorschek T., Feldt R., Svahnberg M., Raja U.A., Kamran K.","24476597300;6507952308;24476388300;55897111600;34880739800;55363502700;","Requirements traceability: A systematic review and industry case study",2012,"International Journal of Software Engineering and Knowledge Engineering","22","3",,"385","433",,"10.1142/S021819401250009X","https://www.scopus.com/inward/record.uri?eid=2-s2.0-84863462192&doi=10.1142%2fS021819401250009X&partnerID=40&md5=13e63fe1e880083c44c3ced15410e501","Requirements traceability enables software engineers to trace a requirement from its emergence to its fulfillment. In this paper we examine requirements traceability definitions, challenges, tools and techniques, by the use of a systematic review performing an exhaustive search through the years 1997-2007. We present a number of common definitions, challenges, available tools and techniques (presenting empirical evidence when found), while complementing the results and analysis with a static validation in industry through a series of interviews. © 2012 World Scientific Publishing Company.","case study; Requirements traceability; systematic review",Review,"Final",,Scopus
"Barroso A.S., Da Silva J.S.M., Soares M.S., Do Nascimento R.P.C.","57191618450;57194832172;55804425900;17433823000;","Influence of human Personality in software engineering a systematic literature review",2017,"ICEIS 2017 - Proceedings of the 19th International Conference on Enterprise Information Systems","3",,,"53","62",,,"https://www.scopus.com/inward/record.uri?eid=2-s2.0-85023189822&partnerID=40&md5=e8c7c3bedc1ef33c0769856b4b0c7174","Personality of software engineering professionals has been a continuous element of interest in academic research. Researchers have applied different models of personality analysis in various software engineering areas to identify improvement points, to promote job satisfaction and to better organize teams. This paper aims to conduct a study, by means of a systematic literature review (SLR), to evaluate personality models applied in software engineering and to understand how human personality influences professional's work. Three main models, most frequently used, were identified (MBTI, BIG 5 and FFM) to evaluate software engineering professionals. There is evidence of the influence of personality on the activities performed. However, some results have suggested that the study of personality is not an easy task to be performed, because there are contradictions in findings that challenges the validity of studies. © Copyright 2017 by SCITEPRESS - Science and Technology Publications, Lda.","Big five; FFM; Human factors; MBTI; Personality traits; Software engineering",Conference Paper,"Final",,Scopus
"Jiang S., Zhang H., Gao C., Shao D., Rong G.","56204852400;55685593500;56205399500;16508165800;36987162200;","Process simulation for software engineering education",2015,"ACM International Conference Proceeding Series","24-26-August-2015",,,"147","156",,"10.1145/2785592.2785606","https://www.scopus.com/inward/record.uri?eid=2-s2.0-84958525702&doi=10.1145%2f2785592.2785606&partnerID=40&md5=e1c9d0cfe02fd29f9a9bb6c4d118280c","Training and learning are one important purpose of Software Process Simulation (SPS). Some previous reviews showed a noticeable number of studies that combine SPS and Software Engineering Education (SEE). The objective of this research is to present the latest state-of-the-art of this area, and more importantly provide practical support for the effective adoption of SPS in educational contexts. We conducted an extended Systematic Literature Review (SLR) based on our previous reviews. The review identified 42 primary studies from 1992 to 2013. This paper presents the preliminary results by answering the research questions. The overall findings confirmed the positive impact of SPS on education. The detailed discussions and recommendations may offer reference value to the community. © 2015 ACM.","Computer game; Non-game simulation; Process simulation; Software engineering education",Conference Paper,"Final",,Scopus
"Lous P., Kuhrmann M., Tell P.","57195397411;14015954200;36969458900;","Is scrum fit for global software engineering?",2017,"Proceedings - 2017 IEEE 12th International Conference on Global Software Engineering, ICGSE 2017",,, 7976681,"1","10",,"10.1109/ICGSE.2017.13","https://www.scopus.com/inward/record.uri?eid=2-s2.0-85027714719&doi=10.1109%2fICGSE.2017.13&partnerID=40&md5=1d290c351172f701b07c723a845194b5","Distributed software engineering and agility are strongly pushing on today's software industry. Due to inherent incompatibilities, for years, studying Scrum and its application in distributed setups has been subject to theoretical and applied research, and an increasing body of knowledge reports insights into this combination. Through a systematic literature review, this paper contributes a collection of experiences on the application of Scrum to global software engineering (GSE). In total, we identified 40 challenges in 19 categories practitioners face when using Scrum in GSE. Among the challenges, scaling Scrum to GSE and adopting practices accordingly are the most frequently named. Our findings also show that most solution proposals aim at modifying elements of the Scrum core processes. We thus conclude that, even though Scrum allows for extensive modification, Scrum itself represents a barrier for global software engineering, and development teams have to customize Scrum properly to benefit from agile software development in GSE. © 2017 IEEE.","Agile software development; Global software engineering; Systematic literature review; Systematic mapping study",Conference Paper,"Final",,Scopus
"Petersen K., Feldt R., Mujtaba S., Mattsson M.","22635718800;24476388300;36160674600;57150599300;","Systematic mapping studies in software engineering",2008,"12th International Conference on Evaluation and Assessment in Software Engineering, EASE 2008",,,,"","",,,"https://www.scopus.com/inward/record.uri?eid=2-s2.0-84887277540&partnerID=40&md5=0eb410c8626940ef793c833b5fc2c78b","BACKGROUND: A software engineering systematic map is a defined method to build a classification scheme and structure a software engineering field of interest. The analysis of results focuses on frequencies of publications for categories within the scheme. Thereby, the coverage of the research field can be determined. Different facets of the scheme can also be combined to answer more specific research questions. OBJECTIVE: We describe how to conduct a systematic mapping study in software engineering and provide guidelines. We also compare systematic maps and systematic reviews to clarify how to chose between them. This comparison leads to a set of guidelines for systematic maps. METHOD: We have defined a systematic mapping process and applied it to complete a systematic mapping study. Furthermore, we compare systematic maps with systematic reviews by systematically analyzing existing systematic reviews. RESULTS: We describe a process for software engineering systematic mapping studies and compare it to systematic reviews. Based on this, guidelines for conducting systematic maps are defined. CONCLUSIONS: Systematic maps and reviews are different in terms of goals, breadth, validity issues and implications. Thus, they should be used complementarily and require different methods (e.g., for analysis). © 2008 Evaluation and Assessment in Software Engineering. All rights reserved.","Evidence based software engineering; Systematic mapping studies; Systematic reviews",Conference Paper,"Final",,Scopus
"Zhang H., Babar M.A., Tell P.","55685593500;6602842620;36969458900;","Identifying relevant studies in software engineering",2011,"Information and Software Technology","53","6",,"625","637",,"10.1016/j.infsof.2010.12.010","https://www.scopus.com/inward/record.uri?eid=2-s2.0-79953708792&doi=10.1016%2fj.infsof.2010.12.010&partnerID=40&md5=d14ab547850c450c742c1922a4453485","Context: Systematic literature review (SLR) has become an important research methodology in software engineering since the introduction of evidence-based software engineering (EBSE) in 2004. One critical step in applying this methodology is to design and execute appropriate and effective search strategy. This is a time-consuming and error-prone step, which needs to be carefully planned and implemented. There is an apparent need for a systematic approach to designing, executing, and evaluating a suitable search strategy for optimally retrieving the target literature from digital libraries. Objective: The main objective of the research reported in this paper is to improve the search step of undertaking SLRs in software engineering (SE) by devising and evaluating systematic and practical approaches to identifying relevant studies in SE. Method: We have systematically selected and analytically studied a large number of papers (SLRs) to understand the state-of-the-practice of search strategies in EBSE. Having identified the limitations of the current ad-hoc nature of search strategies used by SE researchers for SLRs, we have devised a systematic and evidence-based approach to developing and executing optimal search strategies in SLRs. The proposed approach incorporates the concept of 'quasi-gold standard' (QGS), which consists of collection of known studies, and corresponding 'quasi-sensitivity' into the search process for evaluating search performance. Results: We conducted two participant-observer case studies to demonstrate and evaluate the adoption of the proposed QGS-based systematic search approach in support of SLRs in SE research. Conclusion: We report their findings based on the case studies that the approach is able to improve the rigor of search process in an SLR, as well as it can serve as a supplement to the guidelines for SLRs in EBSE. We plan to further evaluate the proposed approach using a series of case studies on varying research topics in SE. © 2011 Elsevier B.V. All rights reserved.","Evidence-based software engineering; Quasi-gold standard; Search strategy; Systematic literature review",Article,"Final",,Scopus
"Souza M.R.A., Veado L., Moreira R.T., Figueiredo E., Costa H.","35607581900;57190228225;56712351100;57213806535;26031311400;","A systematic mapping study on game-related methods for software engineering education",2018,"Information and Software Technology","95",,,"201","218",,"10.1016/j.infsof.2017.09.014","https://www.scopus.com/inward/record.uri?eid=2-s2.0-85031693989&doi=10.1016%2fj.infsof.2017.09.014&partnerID=40&md5=ebf84cf5f43c1d2124df0f940cc4ff68","Context: The use of games in software engineering education is not new. However, recent technologies have provided new opportunities for using games and their elements to enhance learning and student engagement. Objective: The goal of this paper is twofold. First, we discuss how game-related methods have been used in the context of software engineering education by means of a systematic mapping study. Second, we investigate how these game-related methods support specific knowledge areas from software engineering. By achieving these goals, we aim not only to characterize the state of the art on the use of game-related methods on software engineering education, but also to identify gaps and opportunities for further research. Method: We carried out a systematic mapping study to identify primary studies which address the use, proposal or evaluation of games and their elements on software engineering education. We classified primary studies based on type of approaches, learning goals based on software engineering knowledge areas, and specific characteristics of each type of approach. Results: We identified 156 primary studies, published between 1974 and June 2016. Most primary studies describe the use of serious games (86) and game development (57) for software engineering education, while Gamification is the least explored method (10). Learning goals of these studies and their development of skills are mostly related to the knowledge areas of “Software Process”, “Software Design”, and “Professional Practices”. Conclusions: The use of games in software engineering education is not new. However, there are some knowledge areas where the use of games can still be further explored. Gamification is a new trend and existing research in the field is quite preliminary. We also noted a lack of standardization both in the definition of learning goals and in the classification of game-related methods. © 2017 Elsevier B.V.","Game development based learning; Game-based learning; Gamification; Software engineering education",Review,"Final",,Scopus
"Lenberg P., Wallgren Tengberg L.G., Feldt R.","56728585700;57192393063;24476388300;","An initial analysis of software engineers’ attitudes towards organizational change",2017,"Empirical Software Engineering","22","4",,"2179","2205",,"10.1007/s10664-016-9482-0","https://www.scopus.com/inward/record.uri?eid=2-s2.0-85006172824&doi=10.1007%2fs10664-016-9482-0&partnerID=40&md5=3a5909c6278338e67a576abf341161e9","Employees’ attitudes towards organizational change are a critical determinant in the change process. Researchers have therefore tried to determine what underlying concepts that affect them. These extensive efforts have resulted in the identification of several antecedents. However, no studies have been conducted in a software engineering context and the research has provided little information on the relative impact and importance of the identified concepts. In this study, we have combined results from previous social science research with results from software engineering research, and thereby identified three underlying concepts with an expected significant impact on software engineers’ attitudes towards organizational change, i.e. their knowledge about the intended change outcome, their understanding of the need for change, and their feelings of participation in the change process. The result of two separate multiple regression analysis, where we used industrial questionnaire data (N=56), showed that the attitude concept openness to change is predicted by all three concepts, while the attitude concept readiness for change is predicted by need for change and participation. Our research provides an empirical baseline to an important area of software engineering and the result can be a starting-point for future organizational change research. In addition, the proposed model prescribes practical directions for software engineering organizations to adopt in improving employees’ responses to change and, thus, increase the probability of a successful change. © 2016, The Author(s).","Attitudes; Behavioral software engineering; Human aspects; Openness to change; Organizational change; Readiness for change; Social psychology; Software engineering; Systematic literature review",Article,"Final",Open Access,Scopus
"Salleh N., Mendes F., Mendes E.","35230845500;55479979100;7103403410;","A Systematic Mapping Study of Value-Based Software Engineering",2019,"Proceedings - 45th Euromicro Conference on Software Engineering and Advanced Applications, SEAA 2019",,, 8906755,"404","411",,"10.1109/SEAA.2019.00067","https://www.scopus.com/inward/record.uri?eid=2-s2.0-85076010414&doi=10.1109%2fSEAA.2019.00067&partnerID=40&md5=57cec18f84b98fbe325c9829e34c569a","Integrating value-oriented perspectives into the principles and practices of software engineering is critical to ensure that software development and management activities address all key stakeholders' views and also balance short-and-long-term goals. This is put forward in the discipline of Value-Based Software Engineering (VBSE). In this paper, a mapping study of VBSE is detailed. We classify evidence on VBSE principles and practices, research methods, and the research types. This mapping study includes 134 studies located from online searches, and backward snowballing of references. Our results show that VB Requirements Engineering (22%) and VB Planning and Control (19%) were the two principles and practices mostly investigated in the VBSE literature, whereas VB Risk Management, VB People Management and Value Creation (3% respectively) were the three less researched. In terms of the research method, the most commonly employed method is case-study research. In terms of research types, most of the studies (28%) proposed solution technique(s) without empirical validation. © 2019 IEEE.","systematic mapping; value-based software engineering; VBSE principles and practices",Conference Paper,"Final",,Scopus
"Baldassarre M.T., Boffoli N., Caivano D., Visaggio G.","7006753985;13614374100;6603243250;7004522316;","A hands-on approach for teaching systematic review",2008,"Lecture Notes in Computer Science (including subseries Lecture Notes in Artificial Intelligence and Lecture Notes in Bioinformatics)","5089 LNCS",,,"415","426",,"10.1007/978-3-540-69566-0_33","https://www.scopus.com/inward/record.uri?eid=2-s2.0-48349133033&doi=10.1007%2f978-3-540-69566-0_33&partnerID=40&md5=6d2e51b3a96bd3ad98926a8109c9fc68","An essential part of a software engineering education is technology innovation. Indeed software engineers, as future practitioners, must be able to identify the most appropriate technologies to adopt in projects. As so, it is important to develop the skills that will allow them to evaluate and make decisions on tools, technologies, techniques and methods according to the available empirical evidence reported in literature. In this sense, a rigorous manner for analyzing and critically addressing literature is Systematic Review. It requires formalizing an answerable research question according to the problem or issues to face; search the literature for available evidence according to a systematic protocol and retrieve data from the identified sources; analyze the collected evidence and use it to support decision making and conclusions. In this paper we report on how Systematic Review has been integrated in the ""Empirical Software Engineering Methods"" course that is taught at the Department of Informatics at the University of Bari, and how students have been introduced to this type of literature review through a hands-on approach. As far as we know, it is the first attempt of including a complex topic like systematic review in a university course on empirical software engineering. We have no empirical evidence on the effectiveness of the approach adopted, other than practice-based experience that we have acquired. Nonetheless, we have collected qualitative data through a questionnaire submitted to the students of the course. Their positive answers and impressions are a first informal confirmation of the successful application of our strategy. © 2008 Springer-Verlag Berlin Heidelberg.","Empirical Software Engineering; Evidence Based Software Engineering; Statistical Process Control; Systematic Review",Conference Paper,"Final",,Scopus
"Falcão L., Ferreira W., Borges A., Nepomuceno V., Soares S., Baldassare M.T.","57188564975;56311065900;25633540300;25629827000;7006550899;7006753985;","An Analysis of Software Engineering Experiments Using Human Subjects",2015,"International Symposium on Empirical Software Engineering and Measurement","2015-November",, 7321185,"128","131",,"10.1109/ESEM.2015.7321185","https://www.scopus.com/inward/record.uri?eid=2-s2.0-84961583746&doi=10.1109%2fESEM.2015.7321185&partnerID=40&md5=8f06ec566dbbe3ab7c8379d0df11eff3","Context: Researchers perform experiments to check their proposals under controlled conditions. Thus, experiments are an important category of empirical studies and are the classical approach for identifying cause-effect relationships. Goal: Quantitatively characterize and analyze the controlled experiments in software engineering published in journal and conference proceedings in the decade from 2003 to 2013. Method: We performed a systematic mapping study that includes all full papers published at EASE, ESEM and ESEJ. A total of 731 were selected. Results: We obtained 110 papers that report controlled experiments. In these experiments we obtained quantitative data about authors and institutions, subjects, tasks, environment, replication and threats to validity. Conclusions: The main contribution of this work is the amount of experiments published in the three main venues of Empirical Software Engineering between the years 2003 to 2013. And also how these experiments are being reported and executed. © 2015 IEEE.","Decision support systems; Software engineering; Systematics",Conference Paper,"Final",,Scopus
"Bjørnson F.O., Dingsøyr T.","8863297300;6602308355;","Knowledge management in software engineering: A systematic review of studied concepts, findings and research methods used",2008,"Information and Software Technology","50","11",,"1055","1068",,"10.1016/j.infsof.2008.03.006","https://www.scopus.com/inward/record.uri?eid=2-s2.0-49549089759&doi=10.1016%2fj.infsof.2008.03.006&partnerID=40&md5=c84d1b235f2f1df6d836ee5a7bf61a2b","Software engineering is knowledge-intensive work, and how to manage software engineering knowledge has received much attention. This systematic review identifies empirical studies of knowledge management initiatives in software engineering, and discusses the concepts studied, the major findings, and the research methods used. Seven hundred and sixty-two articles were identified, of which 68 were studies in an industry context. Of these, 29 were empirical studies and 39 reports of lessons learned. More than half of the empirical studies were case studies. The majority of empirical studies relate to technocratic and behavioural aspects of knowledge management, while there are few studies relating to economic, spatial and cartographic approaches. A finding reported across multiple papers was the need to not focus exclusively on explicit knowledge, but also consider tacit knowledge. We also describe implications for research and for practice. © 2008 Elsevier B.V. All rights reserved.","Knowledge management; Learning software organization; Software engineering; Software process improvement; Systematic review",Review,"Final",,Scopus
"Soomro A.B., Salleh N.","57202835634;35230845500;","A systematic review of the effects of team climate on software team productivity",2014,"Asia-Pacific World Congress on Computer Science and Engineering, APWC on CSE 2014",,, 7053876,"","",,"10.1109/APWCCSE.2014.7053876","https://www.scopus.com/inward/record.uri?eid=2-s2.0-84988290026&doi=10.1109%2fAPWCCSE.2014.7053876&partnerID=40&md5=d96401defd090d5e6e2d54f6276acf49","The term team-work has been a significant topic in software engineering over the past 50 years. The team climate is the exchange of ideas and perceptions among team members in favor to promote the innovation in work processes. In this paper, we presented our work on a systematic review on the effect of team climate on the software productivity or performance. The summarized results from this research would be useful for achieving effectiveness in software engineering work teams. © 2014 IEEE.","personality; systematic review; team climate; team productivity",Conference Paper,"Final",,Scopus
"Dingsøyr T., Bjørnson F.O., Shull F.","6602308355;8863297300;6603060816;","What do we know about knowledge management? Practical implications for software engineering",2009,"IEEE Software","26","3",,"100","103",,"10.1109/MS.2009.82","https://www.scopus.com/inward/record.uri?eid=2-s2.0-65749092889&doi=10.1109%2fMS.2009.82&partnerID=40&md5=95b9f97812b236d54b4df8cde00842d2","Knowledge management is an overarching idea with a large potential impact on knowledge-intensive work such as software engineering. What do we know about these approaches and how they work in practice? What are the main findings from research on knowledge management in software engineering, and what are these findings' practical implications? This article summarizes a systematic review of research on knowledge management in software engineering, characterizing the research findings and practical implications according to knowledge management school. © 2009 IEEE.","Book reviews; Companies; Educational institutions; Knowledge engineering; Knowledge management; Learning software organization; oftware engineering; oftware process improvement; Software; Software engineering; Systematic review",Article,"Final",,Scopus
"Kuhrmann M., Fernández D.M., Daneva M.","14015954200;55614741000;9039314500;","On the pragmatic design of literature studies in software engineering: an experience-based guideline",2017,"Empirical Software Engineering","22","6",,"2852","2891",,"10.1007/s10664-016-9492-y","https://www.scopus.com/inward/record.uri?eid=2-s2.0-85008429791&doi=10.1007%2fs10664-016-9492-y&partnerID=40&md5=b41dcffeb5fd3b2fb9aa24d81855edd6","Systematic literature studies have received much attention in empirical software engineering in recent years. They have become a powerful tool to collect and structure reported knowledge in a systematic and reproducible way. We distinguish systematic literature reviews to systematically analyze reported evidence in depth, and systematic mapping studies to structure a field of interest in a broader, usually quantified manner. Due to the rapidly increasing body of knowledge in software engineering, researchers who want to capture the published work in a domain often face an extensive amount of publications, which need to be screened, rated for relevance, classified, and eventually analyzed. Although there are several guidelines to conduct literature studies, they do not yet help researchers coping with the specific difficulties encountered in the practical application of these guidelines. In this article, we present an experience-based guideline to aid researchers in designing systematic literature studies with special emphasis on the data collection and selection procedures. Our guideline aims at providing a blueprint for a practical and pragmatic path through the plethora of currently available practices and deliverables capturing the dependencies among the single steps. The guideline emerges from various mapping studies and literature reviews conducted by the authors and provides recommendations for the general study design, data collection, and study selection procedures. Finally, we share our experiences and lessons learned in applying the different practices of the proposed guideline. © 2017, Springer Science+Business Media New York.","Empirical software engineering; Guideline proposal; Lessons learned; Systematic literature review; Systematic mapping study",Article,"Final",,Scopus
"Beecham S., Baddoo N., Hall T., Robinson H., Sharp H.","6505937694;6603114478;56220907900;7202477964;7101843009;","Motivation in Software Engineering: A systematic literature review",2008,"Information and Software Technology","50","9-10",,"860","878",,"10.1016/j.infsof.2007.09.004","https://www.scopus.com/inward/record.uri?eid=2-s2.0-44649089325&doi=10.1016%2fj.infsof.2007.09.004&partnerID=40&md5=59da04592598a2e3376e0feabb1146a2","Objective: In this paper, we present a systematic literature review of motivation in Software Engineering. The objective of this review is to plot the landscape of current reported knowledge in terms of what motivates developers, what de-motivates them and how existing models address motivation. Methods: We perform a systematic literature review of peer reviewed published studies that focus on motivation in Software Engineering. Systematic reviews are well established in medical research and are used to systematically analyse the literature addressing specific research questions. Results: We found 92 papers related to motivation in Software Engineering. Fifty-six percent of the studies reported that Software Engineers are distinguishable from other occupational groups. Our findings suggest that Software Engineers are likely to be motivated according to three related factors: their 'characteristics' (for example, their need for variety); internal 'controls' (for example, their personality) and external 'moderators' (for example, their career stage). The literature indicates that de-motivated engineers may leave the organisation or take more sick-leave, while motivated engineers will increase their productivity and remain longer in the organisation. Aspects of the job that motivate Software Engineers include problem solving, working to benefit others and technical challenge. Our key finding is that the published models of motivation in Software Engineering are disparate and do not reflect the complex needs of Software Engineers in their career stages, cultural and environmental settings. Conclusions: The literature on motivation in Software Engineering presents a conflicting and partial picture of the area. It is clear that motivation is context dependent and varies from one engineer to another. The most commonly cited motivator is the job itself, yet we found very little work on what it is about that job that Software Engineers find motivating. Furthermore, surveys are often aimed at how Software Engineers feel about 'the organisation', rather than 'the profession'. Although models of motivation in Software Engineering are reported in the literature, they do not account for the changing roles and environment in which Software Engineers operate. Overall, our findings indicate that there is no clear understanding of the Software Engineers' job, what motivates Software Engineers, how they are motivated, or the outcome and benefits of motivating Software Engineers. © 2007 Elsevier B.V. All rights reserved.","Characteristics; Motivation; Personality; Software Engineer; Software Engineering; Systematic literature review",Review,"Final",,Scopus
"Haghighatkhah A., Banijamali A., Pakanen O.-P., Oivo M., Kuvaja P.","56319178400;57189384189;55841817900;6603040928;56202183100;","Automotive software engineering: A systematic mapping study",2017,"Journal of Systems and Software","128",,,"25","55",,"10.1016/j.jss.2017.03.005","https://www.scopus.com/inward/record.uri?eid=2-s2.0-85015261358&doi=10.1016%2fj.jss.2017.03.005&partnerID=40&md5=fffc3b97ee5499acebd80afa1ca6cf6f","The automotive industry is going through a fundamental change by moving from a mechanical to a software-intensive industry in which most innovation and competition rely on software engineering competence. Over the last few decades, the importance of software engineering in the automotive industry has increased significantly and has attracted much attention from both scholars and practitioners. A large body-of-knowledge on automotive software engineering has accumulated in several scientific publications, yet there is no systematic analysis of that knowledge. This systematic mapping study aims to classify and analyze the literature related to automotive software engineering in order to provide a structured body-of-knowledge, identify well-established topics and potential research gaps. The review includes 679 articles from multiple research sub-area, published between 1990 and 2015. The primary studies were analyzed and classified with respect to five different dimensions. Furthermore, potential research gaps and recommendations for future research are presented. Three areas, namely system/software architecture and design, qualification testing, and reuse were the most frequently addressed topics in the literature. There were fewer comparative and validation studies, and the literature lacks practitioner-oriented guidelines. Overall, research activity on automotive software engineering seems to have high industrial relevance but is relatively lower in its scientific rigor. © 2017 Elsevier Inc.","Automotive software engineering; Automotive systems; Embedded systems; Literature survey; Software-intensive systems; Systematic mapping study",Article,"Final",,Scopus
"Lenberg P., Feldt R., Wallgren L.G.","56728585700;24476388300;15123584200;","Behavioral software engineering: A definition and systematic literature review",2015,"Journal of Systems and Software","107",,,"15","37",,"10.1016/j.jss.2015.04.084","https://www.scopus.com/inward/record.uri?eid=2-s2.0-84937427797&doi=10.1016%2fj.jss.2015.04.084&partnerID=40&md5=6f1aece0cd52901849c6205caf2aad16","Throughout the history of software engineering, the human aspects have repeatedly been recognized as important. Even though research that investigates them has been growing in the past decade, these aspects should be more generally considered. The main objective of this study is to clarify the research area concerned with human aspects of software engineering and to create a common platform for future research. In order to meet the objective, we propose a definition of the research area behavioral software engineering (BSE) and present results from a systematic literature review based on the definition. The result indicates that there are knowledge gaps in the research area of behavioral software engineering and that earlier research has been focused on a few concepts, which have been applied to a limited number of software engineering areas. The individual studies have typically had a narrow perspective focusing on few concepts from a single unit of analysis. Further, the research has rarely been conducted in collaboration by researchers from both software engineering and social science. Altogether, this review can help put a broader set of human aspects higher on the agenda for future software engineering research and practice. © 2015 Elsevier Inc. All rights reserved.","Human aspects; Psychology; Software engineering",Article,"Final",,Scopus
"Šmite D., Wohlin C., Gorschek T., Feldt R.","22433869800;35547332200;6507952308;24476388300;","Empirical evidence in global software engineering: A systematic review",2010,"Empirical Software Engineering","15","1",,"91","118",,"10.1007/s10664-009-9123-y","https://www.scopus.com/inward/record.uri?eid=2-s2.0-76749155713&doi=10.1007%2fs10664-009-9123-y&partnerID=40&md5=8a7415767741d1c91e56e6d6ff54d5bc","Recognized as one of the trends of the 21st century, globalization of the world economies brought significant changes to nearly all industries, and in particular it includes software development. Many companies started global software engineering (GSE) to benefit from cheaper, faster and better development of software systems, products and services. However, empirical studies indicate that achieving these benefits is not an easy task. Here, we report our findings from investigating empirical evidence in GSE-related research literature. By conducting a systematic review we observe that the GSE field is still immature. The amount of empirical studies is relatively small. The majority of the studies represent problem-oriented reports focusing on different aspects of GSE management rather than in-depth analysis of solutions for example in terms of useful practices or techniques. Companies are still driven by cost reduction strategies, and at the same time, the most frequently discussed recommendations indicate a necessity of investments in travelling and socialization. Thus, at the same time as development goes global there is an ambition to minimize geographical, temporal and cultural separation. These are normally integral parts of cross-border collaboration. In summary, the systematic review results in several descriptive classifications of the papers on empirical studies in GSE and also reports on some best practices identified from literature. © 2009 Springer Science+Business Media, LLC.","Distributed software engineering; Empirical evidence; Empirical studies; Global software engineering; Systematic review",Article,"Final",,Scopus
"Mohanani R., Salman I., Turhan B., Rodriguez P., Ralph P.","57063218100;57021396000;21744228000;56063740800;12239104000;","Cognitive Biases in Software Engineering: A Systematic Mapping Study",2018,"IEEE Transactions on Software Engineering",,,,"","",,"10.1109/TSE.2018.2877759","https://www.scopus.com/inward/record.uri?eid=2-s2.0-85055716207&doi=10.1109%2fTSE.2018.2877759&partnerID=40&md5=a27ce9d5181c5ed6dd22c75ccf727c65","One source of software project challenges and failures is the systematic errors introduced by human cognitive biases. Although extensively explored in cognitive psychology, investigations concerning cognitive biases have only recently gained popularity in software engineering research. This paper therefore systematically maps, aggregates and synthesizes the literature on cognitive biases in software engineering to generate a comprehensive body of knowledge, understand state of the art research and provide guidelines for future research and practise. Focusing on bias antecedents, effects and mitigation techniques, we identified 65 articles (published between 1990 and 2016), which investigate 37 cognitive biases. Despite strong and increasing interest, the results reveal a scarcity of research on mitigation techniques and poor theoretical foundations in understanding and interpreting cognitive biases. Although bias-related research has generated many new insights in the software engineering community, specific bias mitigation techniques are still needed for software professionals to overcome the deleterious effects of cognitive biases on their work. IEEE","Antecedents of cognitive bias; cognitive bias; debiasing; effects of cognitive bias; software engineering; systematic mapping",Article in Press,"Article in Press",,Scopus
"El-Masri D., Petrillo F., Guéhéneuc Y.-G., Hamou-Lhadj A., Bouziane A.","57214938418;25655430600;13613429100;24314702300;57214937870;","A systematic literature review on automated log abstraction techniques",2020,"Information and Software Technology","122",, 106276,"","",,"10.1016/j.infsof.2020.106276","https://www.scopus.com/inward/record.uri?eid=2-s2.0-85079518720&doi=10.1016%2fj.infsof.2020.106276&partnerID=40&md5=dc763f02a0abe1f5f32e03505c66d514","Context: Logs are often the first and only information available to software engineers to understand and debug their systems. Automated log-analysis techniques help software engineers gain insights into large log data. These techniques have several steps, among which log abstraction is the most important because it transforms raw log-data into high-level information. Thus, log abstraction allows software engineers to perform further analyses. Existing log-abstraction techniques vary significantly in their designs and performances. To the best of our knowledge, there is no study that examines the performances of these techniques with respect to the following seven quality aspects concurrently: mode, coverage, delimiter independence, efficiency,scalability, system knowledge independence, and parameter tuning effort. Objectives: We want (1) to build a quality model for evaluating automated log-abstraction techniques and (2) to evaluate and recommend existing automated log-abstraction techniques using this quality model. Method: We perform a systematic literature review (SLR) of automated log-abstraction techniques. We review 89 research papers out of 2,864 initial papers. Results: Through this SLR, we (1) identify 17 automated log-abstraction techniques, (2) build a quality model composed of seven desirable aspects: mode, coverage, delimiter independence, efficiency, scalability, system knowledge independence, and parameter tuning effort, and (3) make recommendations for researchers on future research directions. Conclusion: Our quality model and recommendations help researchers learn about the state-of-the-art automated log-abstraction techniques, identify research gaps to enhance existing techniques, and develop new ones. We also support software engineers in understanding the advantages and limitations of existing techniques and in choosing the suitable technique to their unique use cases. © 2020 Elsevier B.V.","AIOps; Data mining; Log Abstraction Techniques; Log Analysis; Log Management; Log Mining; Log Parsing; Quality Model; Software Analysis; Software Log; Systematic literature review; Systematic survey",Article,"Final",,Scopus
"Kosa M., Yilmaz M., O’Connor R.V., Clarke P.M.","57027872500;55738449500;7202869241;36536766400;","Software engineering education and games: A systematic literature review",2016,"Journal of Universal Computer Science","22","12",,"1558","1574",,,"https://www.scopus.com/inward/record.uri?eid=2-s2.0-85010470203&partnerID=40&md5=59afdb3f2bfd1c091dc9945c942c8c15","The trend in using games in elementary level education also spreads through higher education levels and specific domains such as engineering. Recently, researchers have shown an increased interest in the usage of games in software engineering. In this paper, we are presenting a systematic review and analysis of 350 papers regarding games in software engineering education that was published in the last fifteen years. After applying our inclusion criteria and manual inspection of these studies, we have ended up with 53 primary papers. Based on a systematic process, we reported and discussed our findings with possible future research directions. The main results of this study indicate that the studies are accumulated around 5 categories: Games that learners/students play, games that learners/students develop as projects, curriculum proposals, developing/coming up with new approaches, tools, frameworks or suggestions and others. © J.UCS.","Games; Software engineering; Systematic review",Review,"Final",,Scopus
"Ampatzoglou A., Ampatzoglou A., Chatzigeorgiou A., Avgeriou P.","56647981100;16027681600;6701702023;17343671200;","The financial aspect of managing technical debt: A systematic literature review",2015,"Information and Software Technology","64",,,"52","73",,"10.1016/j.infsof.2015.04.001","https://www.scopus.com/inward/record.uri?eid=2-s2.0-84929458604&doi=10.1016%2fj.infsof.2015.04.001&partnerID=40&md5=df1fe22d8a7bf6565c6bdcfb5b8294cd","Context Technical debt is a software engineering metaphor, referring to the eventual financial consequences of trade-offs between shrinking product time to market and poorly specifying, or implementing a software product, throughout all development phases. Based on its inter-disciplinary nature, i.e. software engineering and economics, research on managing technical debt should be balanced between software engineering and economic theories. Objective The aim of this study is to analyze research efforts on technical debt, by focusing on their financial aspect. Specifically, the analysis is carried out with respect to: (a) how financial aspects are defined in the context of technical debt and (b) how they relate to the underlying software engineering concepts. Method In order to achieve the abovementioned goals, we employed a standard method for SLRs and applied it on studies retrieved from seven general-scope digital libraries. In total we selected 69 studies relevant to the financial aspect of technical debt. Results The most common financial terms that are used in technical debt research are principal and interest, whereas the financial approaches that have been more frequently applied for managing technical debt are real options, portfolio management, cost/benefit analysis and value-based analysis. However, the application of such approaches lacks consistency, i.e., the same approach is differently applied in different studies, and in some cases lacks a clear mapping between financial and software engineering concepts. Conclusion The results are expected to prove beneficial for the communication between technical managers and project managers, in the sense that they will provide a common vocabulary, and will help in setting up quality-related goals, during software development. To achieve this we introduce: (a) a glossary of terms and (b) a classification scheme for financial approaches used for managing technical debt. Based on these, we have been able to underline interesting implications for researchers and practitioners. © 2015 Elsevier B.V.","Financial debt; Financial terms; Systematic literature review; Technical debt",Conference Paper,"Final",,Scopus
"Kitchenham B., Pearl Brereton O., Budgen D., Turner M., Bailey J., Linkman S.","7005427567;23968473900;6603873127;7403215929;55606664400;6602580911;","Systematic literature reviews in software engineering - A systematic literature review",2009,"Information and Software Technology","51","1",,"7","15",,"10.1016/j.infsof.2008.09.009","https://www.scopus.com/inward/record.uri?eid=2-s2.0-56649086628&doi=10.1016%2fj.infsof.2008.09.009&partnerID=40&md5=209d0cdfec109a5c5af11592697dcbf2","Background: In 2004 the concept of evidence-based software engineering (EBSE) was introduced at the ICSE04 conference. Aims: This study assesses the impact of systematic literature reviews (SLRs) which are the recommended EBSE method for aggregating evidence. Method: We used the standard systematic literature review method employing a manual search of 10 journals and 4 conference proceedings. Results: Of 20 relevant studies, eight addressed research trends rather than technique evaluation. Seven SLRs addressed cost estimation. The quality of SLRs was fair with only three scoring less than 2 out of 4. Conclusions: Currently, the topic areas covered by SLRs are limited. European researchers, particularly those at the Simula Laboratory appear to be the leading exponents of systematic literature reviews. The series of cost estimation SLRs demonstrate the potential value of EBSE for synthesising evidence and making it available to practitioners. © 2008 Elsevier B.V. All rights reserved.","Cost estimation; Evidence-based software engineering; Systematic literature review; Systematic review quality; Tertiary study",Review,"Final",,Scopus
"Da Silva F.Q.B., Santos A.L.M., Soares S., Frana A.C.C., Monteiro C.V.F., MacIel F.F.","35229324700;8832605700;7006550899;39461293000;36615853300;41561692100;","Six years of systematic literature reviews in software engineering: An updated tertiary study",2011,"Information and Software Technology","53","9",,"899","913",,"10.1016/j.infsof.2011.04.004","https://www.scopus.com/inward/record.uri?eid=2-s2.0-79958214321&doi=10.1016%2fj.infsof.2011.04.004&partnerID=40&md5=d0bc789199b4fbad08a1dc7a2dcb36eb","Context: Since the introduction of evidence-based software engineering in 2004, systematic literature review (SLR) has been increasingly used as a method for conducting secondary studies in software engineering. Two tertiary studies, published in 2009 and 2010, identified and analysed 54 SLRs published in journals and conferences in the period between 1st January 2004 and 30th June 2008. Objective: In this article, our goal was to extend and update the two previous tertiary studies to cover the period between 1st July 2008 and 31st December 2009. We analysed the quality, coverage of software engineering topics, and potential impact of published SLRs for education and practice. Method: We performed automatic and manual searches for SLRs published in journals and conference proceedings, analysed the relevant studies, and compared and integrated our findings with the two previous tertiary studies. Results: We found 67 new SLRs addressing 24 software engineering topics. Among these studies, 15 were considered relevant to the undergraduate educational curriculum, and 40 appeared of possible interest to practitioners. We found that the number of SLRs in software engineering is increasing, the overall quality of the studies is improving, and the number of researchers and research organisations worldwide that are conducting SLRs is also increasing and spreading. Conclusion: Our findings suggest that the software engineering research community is starting to adopt SLRs consistently as a research method. However, the majority of the SLRs did not evaluate the quality of primary studies and fail to provide guidelines for practitioners, thus decreasing their potential impact on software engineering practice. © 2011 Elsevier B.V. All rights reserved.","Mapping studies; Software engineering; Systematic reviews; Tertiary studies",Review,"Final",,Scopus
"De Magalhães C.V.C., Da Silva F.Q.B., Santos R.E.S., Suassuna M.","56005918200;35229324700;56021814500;54788406200;","Investigations about replication of empirical studies in software engineering: A systematic mapping study",2015,"Information and Software Technology","64",,,"76","101",,"10.1016/j.infsof.2015.02.001","https://www.scopus.com/inward/record.uri?eid=2-s2.0-84929027242&doi=10.1016%2fj.infsof.2015.02.001&partnerID=40&md5=17fa330846c72141766f2eef127c8bf7","Context Two recent mapping studies which were intended to verify the current state of replication of empirical studies in Software Engineering (SE) identified two sets of studies: empirical studies actually reporting replications (published between 1994 and 2012) and a second group of studies that are concerned with definitions, classifications, processes, guidelines, and other research topics or themes about replication work in empirical software engineering research (published between 1996 and 2012). Objective In this current article, our goal is to analyze and discuss the contents of the second set of studies about replications to increase our understanding of the current state of the work on replication in empirical software engineering research. Method We applied the systematic literature review method to build a systematic mapping study, in which the primary studies were collected by two previous mapping studies covering the period 1996-2012 complemented by manual and automatic search procedures that collected articles published in 2013. Results We analyzed 37 papers reporting studies about replication published in the last 17 years. These papers explore different topics related to concepts and classifications, presented guidelines, and discuss theoretical issues that are relevant for our understanding of replication in our field. We also investigated how these 37 papers have been cited in the 135 replication papers published between 1994 and 2012. Conclusions Replication in SE still lacks a set of standardized concepts and terminology, which has a negative impact on the replication work in our field. To improve this situation, it is important that the SE research community engage on an effort to create and evaluate taxonomy, frameworks, guidelines, and methodologies to fully support the development of replications. © 2015 Elsevier B.V.","Empirical studies; Experiments; Mapping study; Replications; Software engineering; Systematic literature review",Conference Paper,"Final",,Scopus
